services:
    # zoo1:
    #     image: zookeeper:3.4.9
    #     restart: unless-stopped
    #     hostname: zoo1
    #     ports:
    #         - "2181:2181"
    #     environment:
    #         ZOO_MY_ID: 1
    #         ZOO_PORT: 2181
    #         ZOO_SERVERS: server.1=zoo1:2888:3888
    #     volumes:
    #         - ./full-stack/zoo1/data:/data
    #         - ./full-stack/zoo1/datalog:/datalog
    # kafka1:
    #     image: confluentinc/cp-kafka:5.2.1
    #     hostname: kafka1
    #     ports:
    #         - "9092:9092"
    #     environment:
    #         KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
    #         KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
    #         KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
    #         KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
    #         KAFKA_BROKER_ID: 1
    #         KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    #         KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    #     volumes:
    #         - ./full-stack/kafka1/data:/var/lib/kafka/data
    #     depends_on:
    #         - zoo1
    # mongo:
    #     image: mongo
    #     restart: always
    #     environment:
    #         MONGO_INITDB_ROOT_USERNAME: root
    #         MONGO_INITDB_ROOT_PASSWORD: root
    #         MONGODB_DATABASE: "tp"
    register:
        build: ./register-service-api/
        ports: 
            - "3010:3010"
    app-1:
        build: ./app-1/
        depends_on: 
            # register:
            #     condition: service_healthy
            - register
        ports: 
            - "3001:3000"
        
    app-2:
        build: ./app-2/
        depends_on: 
            - register
        ports: 
            - "3002:3002"
    api-gateway:
        build: ./api-gateway/
        depends_on: 
            - register
        ports: 
            - "3000:3000"
        # healthcheck:
        #     test: ["curl","http://"]
        #     interval: 10s
        #     timeout: 
    
    
